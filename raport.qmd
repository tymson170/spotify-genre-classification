---
title: "Projekt klasyfikacji gatunku muzyki"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(ggplot2)
library(PerformanceAnalytics)
library(corrplot)
library(psych)
library(hrbrthemes)
library(agricolae)
library(FSA)
library(rstatix)
library(ggpubr)

```

# Przygotowanie zbioru

## Wstępne uporządkowanie zbioru

### Wczytanie zbioru

```{r}
file <- read.csv("spotify-genres-classification-new.csv")
head(file)
```

### Usunięcie niepotrzebnych kolumn

```{r}
df <- file %>% 
  select(-c("X", "playlist_id", "playlist_img", "playlist_owner_name", "playlist_owner_id", "track.id", "analysis_url", "added_at", "is_local", "primary_color", "added_by.href", "added_by.id", "added_by.type", "added_by.uri", "added_by.external_urls.spotify", "track.disc_number", "track.episode", "track.href", "track.is_local", "track.preview_url", "track.track", "track.track_number", "track.type", "track.uri", "track.album.album_type", "track.album.href", "track.album.id", "track.album.name", "track.album.total_tracks", "track.album.type", "track.album.uri", "track.album.external_urls.spotify", "track.external_ids.isrc", "track.external_urls.spotify", "video_thumbnail.url", "track.album.release_date_precision"))

colnames(df)
```

Zostawiłem kolumnę odpowiadającą nazwie piosenki w celu łatwiejszej identyfikacji błędów napotkanych podczas wstępnego przygotowywania kolumn.

### Dodanie kolumny odpowiadającej gatunkowi utworu

```{r}
table(df$playlist_name)
```

```{r}
df$genre <- "NA"

metal_playlists <- c("00s Metal Classics", "10s Metal Classics", "Metal Essentials")
hiphop_playlists <- c("Hip-Hop Drive", "Gold School", "RAP GENERACJA")
rock_playlists <- c("All New Rock", "Rock Classics")
blues_playlists <- c("Blues Classics", "Blues Standards", "Classic Blues Guitar", "Electric Blues Classics")
classical_playlists <- c("Classical Essentials", "Classical New Releases")
country_playlists <- c("Country's Greatest Hits", "Country Top 50", "Hot Country")
folk_playlists <- c("Fresh Folk", "Roots Rising")
jazz_playlists <- c("Jazz Classics")
reggae_playlists <- c("Reggae Classics", "Summer Sunshine Reggae", "Reggae Party")

df[df$playlist_name %in% metal_playlists,]$genre <- "metal" 
df[df$playlist_name %in% hiphop_playlists,]$genre <- "hiphop" 
df[df$playlist_name %in% rock_playlists,]$genre <- "rock" 
df[df$playlist_name %in% blues_playlists,]$genre <- "blues" 
df[df$playlist_name %in% classical_playlists,]$genre <- "classical" 
df[df$playlist_name %in% country_playlists,]$genre <- "country" 
df[df$playlist_name %in% folk_playlists,]$genre <- "folk" 
df[df$playlist_name %in% jazz_playlists,]$genre <- "jazz" 
df[df$playlist_name %in% reggae_playlists,]$genre <- "reggae" 

df <- df %>% 
  filter(genre != "NA")

table(df$genre)
```

Usuwam kolumnę `playlist_name` bo nie jest już potrzebna.

```{r}
df <- df %>% 
  select(-playlist_name)
```

### Sprawdzenie obecności wartości brakujących

```{r}
any(is.na(df))
df[!complete.cases(df), ]
df <- na.omit(df)
any(is.na(df))
```

### Sprawdzenie poprawności typów danych

```{r}
str(df)
```

### Identyfikacja duplikatów

```{r}
duplicated(df$track.name) %>% table()
df <- df %>% 
  distinct(track.name, .keep_all = TRUE)
duplicated(df$track.name) %>% table()
```

### Usunięcie wiersza z tempem = 0

```{r}
nrow(df)
df <- df %>% 
  filter(tempo != 0)
nrow(df)
```

### Zebranie metrum muzycznego innego niż 3/4, 4/4 i 5/4 w kategorię `inne`

```{r}
table(df$time_signature)
```

```{r}
df[df$time_signature == 0,]$track.name
```

```{r}
df[df$time_signature == 1, ]$track.name[33]
```

```{r}
df$time_signature <- as.character(df$time_signature)
df$time_signature <- ifelse(df$time_signature %in% c("3", "4", "5"),
                            df$time_signature, 
                            "other")
table(df$time_signature)
```

### Wyciągnięcie z kolumny `track.album.release_date` samego roku

```{r}
df$track.album.release_date <- substr(df$track.album.release_date, 1, 4)
colnames(df)[17] <- "release_year"
df$release_year <- as.integer(df$release_year)
head(df$release_year)
table(df$release_year)
```

### Zmiana wartości w kolumnie `track.explicit` na 0 i 1

```{r}
df$track.explicit <- ifelse(df$track.explicit == TRUE, 1, 0)
table(df$track.explicit)
```

## Kodowanie zmiennych kategorialnych

```{r}
table(df$key)
```

```{r}
df$key <- factor(df$key_name)
df$mode <- factor(df$mode_name)
df$time_signature <- factor(df$time_signature, levels = c("3", "4", "5", "other"), labels = c("3/4", "4/4", "5/4", "other"))
df$track.explicit <- factor(df$track.explicit, levels = c(0, 1), labels = c(0, 1))
```

#### Usunięcie nadmiarowej zmiennej `key_mode`

```{r}
df <- df %>% 
  select(-c(key_mode, key_name, mode_name))
```

```{r}
df$genre <- factor(df$genre)
```

### Zmiana zmiennej `release_year` na zmienną `decade`

```{r}
df$decade <- (df$release_year - df$release_year %% 10) %% 100
table(df$decade)
df[df$decade %in% c(30, 40, 50, 60), ]$decade <- "<70"
df[df$decade == 0, ]$decade <- "00"
df$decade <- as.character(df$decade)
df$decade <- factor(df$decade, levels = c("<70", "70", "80", "90", "00", "10", "20"))
str(df$decade)

df <- df %>% 
  select(-release_year)
```

### Zmiana jednostki w zmiennej `track.duration_ms` na sekundy

```{r}
df$track.duration_s <- df$track.duration_ms / 1000
df <- df %>% 
  select(-track.duration_ms)
```

# Wizualizacja

### Wykresy zmiennych

::: panel-tabset
#### Zmienne kategorialne

::: panel-tabset
##### Gatunek

```{r}
ggplot(df, aes(x = genre)) + geom_bar(fill = "#F8766D")
```

##### Skale

```{r}
ggplot(df, aes(x = key, fill = mode)) + geom_bar()
```

##### Metrum

```{r}
ggplot(df, aes(x = time_signature)) + geom_bar(fill = "#F8766D")
```

##### Wulgarność

```{r}
ggplot(df, aes(x = track.explicit)) + geom_bar(fill = "#F8766D")
```

##### Dekada

```{r}
ggplot(df, aes(x = decade)) + geom_bar(fill = "#F8766D")
```
:::

#### Zmienne ciągłe

::: panel-tabset
##### Taneczność

```{r}
ggplot(df, aes(x = danceability)) + geom_histogram(bins = 30, fill = "#F8766D")
```

##### Energiczność

```{r}
ggplot(df, aes(x = energy)) + geom_histogram(bins = 30, fill = "#F8766D")
```

##### Głośność

```{r}
ggplot(df, aes(x = loudness)) + geom_histogram(bins = 30, fill = "#F8766D")
```

##### Recytowalność

```{r}
ggplot(df, aes(x = speechiness)) + geom_histogram(bins = 30, fill = "#F8766D")
```

##### Akustyczność

```{r}
ggplot(df, aes(x = acousticness)) + geom_histogram(bins = 30, fill = "#F8766D")
```

##### Instrumentalność

```{r}
ggplot(df, aes(x = instrumentalness)) + geom_histogram(bins = 30, fill = "#F8766D")
```

##### Wersja na żywo

```{r}
ggplot(df, aes(x = liveness)) + geom_histogram(bins = 30, fill = "#F8766D")
```

##### Pozytywność nastroju

```{r}
ggplot(df, aes(x = valence)) + geom_histogram(bins = 30, fill = "#F8766D")
```

##### Tempo

```{r}
ggplot(df, aes(x = tempo)) + geom_histogram(bins = 30, fill = "#F8766D")
```

##### Popularność

```{r}
ggplot(df, aes(x = track.popularity)) + geom_histogram(bins = 30, fill = "#F8766D")
```

##### Długość

```{r}
ggplot(df, aes(x = track.duration_s)) + geom_histogram(bins = 30, fill = "#F8766D")
```
:::
:::

### Dekada w zależności od gatunku

```{r}
genres <- as.character(unique(df$genre))
```

::: panel-tabset
##### Blues

```{r}
ggplot(df[df$genre == genres[1], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[1], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```

##### Muzyka klasyczna

```{r}
ggplot(df[df$genre == genres[2], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[2], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```

##### Country

```{r}
ggplot(df[df$genre == genres[3], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[3], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```

##### Folk

```{r}
ggplot(df[df$genre == genres[4], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[4], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```

##### Jazz

```{r}
ggplot(df[df$genre == genres[5], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[5], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```

##### Hiphop

```{r}
ggplot(df[df$genre == genres[6], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[6], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```

##### Reggae

```{r}
ggplot(df[df$genre == genres[7], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[7], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```

##### Rock

```{r}
ggplot(df[df$genre == genres[8], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[8], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```

##### Metal

```{r}
ggplot(df[df$genre == genres[9], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[9], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```
:::

### Treści wulgarne w zależności od gatunku

```{r}
df %>% 
  filter(track.explicit == 1) %>% 
  group_by(genre) %>% 
  summarise(n = n()) %>%
  mutate(all = c(187, 226, 238, 248, 235, 247)) %>% 
  ggplot(aes(x = reorder(genre, -n), y = n)) + geom_bar(stat = "identity", fill = "#F8766D") + xlab("genre") + ylab("count") + 
geom_text(aes(label = paste0(round(n/all*100, 2), "%")), position = position_dodge(width = 0.9), vjust = -0.25)
```

### Boxploty długości piosenek

```{r}
ggplot(df, aes(y = track.duration_s/60, x = genre, fill = genre)) + geom_boxplot() + theme(legend.position = "") + ylab("Track length (minutes)")
```

```{r}
df %>%
group_by(genre) %>%
summarise(rozmiar_próby=length(track.duration_s), p_wartość_Shapiro_Wilk=shapiro.test(track.duration_s)$p.value)
```

```{r}
bartlett.test(df$track.duration_s, df$genre)
```

```{r}
kruskal.test(track.duration_s ~ genre, df)
```

```{r}
dunntest <- dunn_test(df, track.duration_s ~ genre, p.adjust.method = "bonferroni")
View(dunntest)
```

```{r}
dunntest <- dunntest %>% add_xy_position(x = "genre")
ggboxplot(df, x = "genre", y = "track.duration_s", fill = "genre", legend = "") + stat_pvalue_manual(dunntest, hide.ns = TRUE, label = "{round(p.adj, 2)}") 
```

### Popularność gatunków

```{r}
ggplot(df, aes(y = track.popularity, x = genre, fill = genre)) + geom_boxplot() 
```

```{r}
df %>% 
  select(track.popularity, track.name) %>% 
  arrange(-track.popularity) %>% 
  head()
```

### Energy vs. loudness

```{r}
ggplot(df, aes(x = energy, y = loudness, colour = genre)) + geom_point()
```

### Danceability vs. valence

```{r}
ggplot(df, aes(x = danceability, y = valence, colour = genre)) + geom_point()
```

### Wykres korelacji

```{r}
df %>% 
  select(where(is.numeric)) %>%
  cor() %>% 
  corPlot(cex = 0.5, xlas = 2)
```

```{r}
ggplot(df, aes(x = energy, y = loudness)) + geom_point() + geom_smooth(method = "lm", formula = y ~ poly(x, 2))
```

```{r}
ggplot(df, aes(x = genre, y = tempo)) + geom_boxplot()
```
