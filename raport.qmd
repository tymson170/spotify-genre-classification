---
title: "Projekt klasyfikacji gatunku muzyki"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
execute: 
  echo: false
---

```{r}
library(tidyverse)
library(ggplot2)
```

# Przygotowanie zbioru

## Wstępne uporządkowanie zbioru

### Wczytanie zbioru

```{r}
file <- read.csv(file = "spotify-genres-classification.csv")
head(file)
```

### Usunięcie niepotrzebnych kolumn

```{r}
df <- file %>% 
  select(-c("X", "playlist_id", "playlist_img", "playlist_owner_name", "playlist_owner_id", "track.id", "analysis_url", "added_at", "is_local", "primary_color", "added_by.href", "added_by.id", "added_by.type", "added_by.uri", "added_by.external_urls.spotify", "track.disc_number", "track.episode", "track.href", "track.is_local", "track.preview_url", "track.track", "track.track_number", "track.type", "track.uri", "track.album.album_type", "track.album.href", "track.album.id", "track.album.name", "track.album.total_tracks", "track.album.type", "track.album.uri", "track.album.external_urls.spotify", "track.external_ids.isrc", "track.external_urls.spotify", "video_thumbnail.url", "track.album.release_date_precision"))

colnames(df)
```

Zostawiłem kolumnę odpowiadającą nazwie piosenki w celu łatwiejszej identyfikacji błędów napotkanych podczas wstępnego przygotowywania kolumn.

### Dodanie kolumny odpowiadającej gatunkowi utworu

```{r}
table(df$playlist_name)
```

```{r}
df$genre <- "NA"

metal_playlists <- c("00s Metal Classics", "10s Metal Classics", "Metal Essentials")
newage_playlists <- c("1980s New Age Classics", "Early New Age", "New Age Classics")
rock_playlists <- c("All New Rock", "Rock Classics")
blues_playlists <- c("Blues Classics", "Blues Standards", "Classic Blues Guitar", "Electric Blues Classics")
classical_playlists <- c("Classical Essentials", "Classical New Releases")
country_playlists <- c("Country's Greatest Hits", "Country Top 50", "Hot Country")
folk_playlists <- c("Fresh Folk", "Roots Rising")
jazz_playlists <- c("Jazz Classics")
reggae_playlists <- c("One Love", "Reggae Classics", "Summer Sunshine Reggae")

df[df$playlist_name %in% metal_playlists,]$genre <- "metal" 
df[df$playlist_name %in% newage_playlists,]$genre <- "newage" 
df[df$playlist_name %in% rock_playlists,]$genre <- "rock" 
df[df$playlist_name %in% blues_playlists,]$genre <- "blues" 
df[df$playlist_name %in% classical_playlists,]$genre <- "classical" 
df[df$playlist_name %in% country_playlists,]$genre <- "country" 
df[df$playlist_name %in% folk_playlists,]$genre <- "folk" 
df[df$playlist_name %in% jazz_playlists,]$genre <- "jazz" 
df[df$playlist_name %in% reggae_playlists,]$genre <- "reggae" 

table(df$genre)
```

Usuwam kolumnę `playlist_name` bo nie jest już potrzebna.

```{r}
df <- df %>% 
  select(-playlist_name)
```

### Sprawdzenie obecności wartości brakujących

```{r}
any(is.na(df))
```

### Sprawdzenie poprawności typów danych

```{r}
str(df)
```

### Identyfikacja duplikatów

```{r}
duplicated(df$track.name) %>% table()
df <- df %>% 
  distinct(track.name, .keep_all = TRUE)
duplicated(df$track.name) %>% table()
```

### Zebranie metrum muzycznego innego niż 3/4, 4/4 i 5/4 w kategorię `inne`

```{r}
table(df$time_signature)
```

```{r}
df[df$time_signature == 0,]$track.name
```

```{r}
df[df$time_signature == 1, ]$track.name[33]
```

```{r}
df$time_signature <- as.character(df$time_signature)
df$time_signature <- ifelse(df$time_signature %in% c("3", "4", "5"),
                            df$time_signature, 
                            "other")
table(df$time_signature)
```

### Wyciągnięcie z kolumny `track.album.release_date` samego roku

```{r}
df$track.album.release_date <- substr(df$track.album.release_date, 1, 4)
colnames(df)[17] <- "release_year"
df$release_year <- as.integer(df$release_year)
head(df$release_year)
table(df$release_year)
```

### Zmiana wartości w kolumnie `track.explicit` na 0 i 1

```{r}
df$track.explicit <- ifelse(df$track.explicit == TRUE, 1, 0)
table(df$track.explicit)
```

## Kodowanie zmiennych kategorialnych

```{r}
table(df$key)
```

```{r}
df$key <- factor(df$key, levels = 0:11, labels = 0:11)
df$mode <- factor(df$mode, levels = c(0, 1), labels = c(0, 1))
df$time_signature <- factor(df$time_signature, levels = c("3", "4", "5", "other"), labels = c("3/4", "4/4", "5/4", "other"))
df$track.explicit <- factor(df$track.explicit, levels = c(0, 1), labels = c(0, 1))
```

#### Usunięcie nadmiarowej zmiennej `key_mode`

```{r}
df <- df %>% 
  select(-key_mode)
```

```{r}
df$key_name <- factor(df$key_name)
df$mode_name <- factor(df$mode_name)
df$genre <- factor(df$genre)
```

### Zmiana zmiennej `release_year` na zmienną `decade`

```{r}
df$decade <- (df$release_year - df$release_year %% 10) %% 100
table(df$decade)
df[df$decade %in% c(30, 40, 50), ]$decade <- "<60"
df[df$decade == 0, ]$decade <- "00"
df$decade <- as.character(df$decade)
df$decade <- factor(df$decade, levels = c("<60", "60", "70", "80", "90", "00", "10", "20"))
str(df$decade)

df <- df %>% 
  select(-release_year)
```

### Zmiana jednostki w zmiennej `track.duration_ms` na sekundy

```{r}
df$track.duration_s <- df$track.duration_ms / 1000
df <- df %>% 
  select(-track.duration_ms)
```

# Wizualizacja

### Dekada w zależności od gatunku

```{r}
genres <- as.character(unique(df$genre))
```

::: panel-tabset
##### `r genres[1]`

```{r}
ggplot(df[df$genre == genres[1], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[1], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```

##### `r genres[2]`

```{r}
ggplot(df[df$genre == genres[2], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[2], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```

##### `r genres[3]`

```{r}
ggplot(df[df$genre == genres[3], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[3], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```

##### `r genres[4]`

```{r}
ggplot(df[df$genre == genres[4], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[4], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```

##### `r genres[5]`

```{r}
ggplot(df[df$genre == genres[5], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[5], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```

##### `r genres[6]`

```{r}
ggplot(df[df$genre == genres[6], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[6], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```

##### `r genres[7]`

```{r}
ggplot(df[df$genre == genres[7], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[7], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```

##### `r genres[8]`

```{r}
ggplot(df[df$genre == genres[8], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[8], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```

##### `r genres[9]`

```{r}
ggplot(df[df$genre == genres[9], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[9], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```
:::

### Treści wulgarne w zależności od gatunku

```{r}
df %>% 
  filter(track.explicit == 1) %>% 
  group_by(genre) %>% 
  summarise(sum_explicit = sum(as.numeric(track.explicit))) %>% 
  ggplot(aes(x = reorder(genre, -sum_explicit), y = sum_explicit)) + geom_bar(stat = "identity", fill = "#F8766D") + xlab("genre") + ylab("count")
```

### Boxploty długości piosenek

```{r}
ggplot(df, aes(y = track.duration_s/60, x = genre, fill = genre)) + geom_boxplot() + theme(legend.position = "") + ylab("Track length (minutes)")
```

### Popularność gatunków

```{r}
ggplot(df, aes(y = track.popularity, x = genre, fill = genre)) + geom_boxplot()
```

```{r}
df %>% 
  select(track.popularity, track.name) %>% 
  arrange(-track.popularity) %>% 
  head()
```
