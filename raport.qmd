---
title: "Projekt klasyfikacji gatunku muzyki"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
execute: 
  warning: false
---

```{r echo=FALSE}
library(tidyverse)
library(ggplot2)
library(PerformanceAnalytics)
library(corrplot)
library(psych)
library(hrbrthemes)
library(agricolae)
library(FSA)
library(rstatix)
library(ggpubr)
library(plotly)
library(tidymodels)
library(recipes)
library(rpart)
library(dials)
library(rules)
library(baguette)
library(parsnip)
library(discrim)
library(doParallel)
library(sparsediscrim)
library(cvms)
library(kableExtra)
library(htmlTable)
library(shapr)
library(vip)
```

# Przygotowanie zbioru

## Wstępne uporządkowanie zbioru

```{r echo=FALSE}
file <- read.csv("spotify-genres-classification-new.csv")
kable(head(file), "html") %>% kable_styling("striped") %>% scroll_box(width = "100%")
```

### Usunięcie niepotrzebnych kolumn

```{r echo=FALSE}
print_oneperline <- function(x) {
  cat(sprintf(paste0('% ', floor(log10(length(x))) + 3,'s "%s"\n'), 
              paste0("[", seq_along(x), "]"), x), sep = "")
  }
```

```{r echo=FALSE}
df <- file %>% 
  select(-c("X", "playlist_id", "playlist_img", "playlist_owner_name", "playlist_owner_id", "track.id", "analysis_url", "added_at", "is_local", "primary_color", "added_by.href", "added_by.id", "added_by.type", "added_by.uri", "added_by.external_urls.spotify", "track.disc_number", "track.episode", "track.href", "track.is_local", "track.preview_url", "track.track", "track.track_number", "track.type", "track.uri", "track.album.album_type", "track.album.href", "track.album.id", "track.album.name", "track.album.total_tracks", "track.album.type", "track.album.uri", "track.album.external_urls.spotify", "track.external_ids.isrc", "track.external_urls.spotify", "video_thumbnail.url", "track.album.release_date_precision"))
```

```{r echo=FALSE}
print_oneperline(colnames(df))
```

Zostawiłem kolumnę odpowiadającą nazwie piosenki w celu łatwiejszej identyfikacji błędów napotkanych podczas wstępnego przygotowywania kolumn.

### Dodanie kolumny odpowiadającej gatunkowi utworu

```{r}
kable(table(df$playlist_name), "html", col.names = c("Variable", "Frequency")) %>%   kable_styling("striped") %>% 
  scroll_box(height = "500px")
```

```{r echo=FALSE}
df$genre <- "NA"

metal_playlists <- c("00s Metal Classics", "10s Metal Classics", "Metal Essentials")
hiphop_playlists <- c("Hip-Hop Drive", "Gold School", "RAP GENERACJA")
rock_playlists <- c("All New Rock", "Rock Classics")
blues_playlists <- c("Blues Classics", "Blues Standards", "Classic Blues Guitar", "Electric Blues Classics")
classical_playlists <- c("Classical Essentials", "Classical New Releases")
country_playlists <- c("Country's Greatest Hits", "Country Top 50", "Hot Country")
folk_playlists <- c("Fresh Folk", "Roots Rising")
jazz_playlists <- c("Jazz Classics")
reggae_playlists <- c("Reggae Classics", "Summer Sunshine Reggae", "Reggae Party")

df[df$playlist_name %in% metal_playlists,]$genre <- "metal" 
df[df$playlist_name %in% hiphop_playlists,]$genre <- "hiphop" 
df[df$playlist_name %in% rock_playlists,]$genre <- "rock" 
df[df$playlist_name %in% blues_playlists,]$genre <- "blues" 
df[df$playlist_name %in% classical_playlists,]$genre <- "classical" 
df[df$playlist_name %in% country_playlists,]$genre <- "country" 
df[df$playlist_name %in% folk_playlists,]$genre <- "folk" 
df[df$playlist_name %in% jazz_playlists,]$genre <- "jazz" 
df[df$playlist_name %in% reggae_playlists,]$genre <- "reggae" 

df <- df %>% 
  filter(genre != "NA")
```

```{r}
kable(table(df$genre), "html", col.names = c("Variable", "Frequency")) %>% 
  kable_styling("striped")
```

Usuwam kolumnę `playlist_name` bo nie jest już potrzebna.

```{r}
df <- df %>% 
  select(-playlist_name)
```

### Sprawdzenie obecności wartości brakujących

```{r}
any(is.na(df))
```

```{r echo=FALSE}
kable(df[!complete.cases(df), ], "html") %>% kable_styling("striped")
```

```{r}
df <- na.omit(df)
any(is.na(df))
```

### Identyfikacja duplikatów

```{r echo=FALSE}
duplicated(df$track.name) %>% 
  table() %>% 
  kable("html", table.attr = "style='width:30%;'", col.names = c("Is duplicated", "Frequency")) %>% 
  kable_styling("striped")
```

```{r}
df <- df %>% 
  distinct(track.name, .keep_all = TRUE)
```

```{r echo=FALSE}
duplicated(df$track.name) %>% 
  table() %>% 
  kable("html", table.attr = "style='width:30%;'", col.names = c("Is duplicated", "Frequency")) %>% 
  kable_styling("striped") 
```

### Weryfikacja poprawności danych

```{r}
devtools::source_gist('4a0a5ab9fe7e1cf3be0e')
strtable(df) %>% 
  select(-levels) %>%  
  kable("html") %>% 
  kable_styling("striped") %>% 
  scroll_box(height = "500px")
```

```{r echo=FALSE}
funs <- lst(min, median, mean, max, sd)

t(map_dfr(funs,
        ~ summarize(df %>% select(-c(key, mode, time_signature)), 
                    across(where(is.numeric), .x, na.rm = TRUE)),
        .id = "statistic")) %>% 
  kable("html") %>% 
  kable_styling("striped")
```

#### Usunięcie wiersza z tempem = 0

```{r echo=FALSE}
df[df$tempo < 40, ] %>% kable("html") %>% kable_styling("striped")
```

```{r}
df <- df %>% 
  filter(tempo != 0)
```

#### Usunięcie nadmiarowych zmiennych `key_mode`, `key_name` oraz `mode_name`

```{r}
df <- df %>% 
  select(-c(key_mode, key_name, mode_name))
```

#### Zmiana jednostki w zmiennej `track.duration_ms` na sekundy

```{r}
df$track.duration_s <- df$track.duration_ms / 1000
df <- df %>% 
  select(-track.duration_ms)
```

#### Rezygnacja ze zmiennej `popularity`

```{r}
ggplot(df, aes(x = track.popularity)) + geom_histogram(bins = 30, fill = "#F8766D")
```

```{r}
nrow(df[df$track.popularity == 0, ])
```

```{r}
df <- df %>% 
  select(-track.popularity)
```

#### Zebranie metrum muzycznego innego niż 3/4, 4/4 i 5/4 w kategorię `inne`

```{r echo=FALSE}
table(df$time_signature) %>% 
  kable("html", table.attr = "style='width:30%;'", col.names = c("Value", "Frequency")) %>% 
  kable_styling("striped")
```

```{r}
df[df$time_signature == 1, ]$track.name
```

{{< video https://www.youtube.com/watch?v=5ClCaPmAA7s >}}

```{r echo}
df$time_signature <- as.character(df$time_signature)
df$time_signature <- ifelse(df$time_signature %in% c("3", "4"),
                            df$time_signature, 
                            "other")
```

```{r echo=FALSE}
table(df$time_signature) %>% 
  kable("html", table.attr = "style='width:30%;'", col.names = c("Value", "Frequency")) %>% 
  kable_styling("striped")
```

#### Zmiana zmiennej `track.album.release_date` na zmienną `decade`

```{r}
df$track.album.release_date <- substr(df$track.album.release_date, 1, 4)
colnames(df)[15] <- "release_year"
df$release_year <- as.integer(df$release_year)
df$decade <- (df$release_year - df$release_year %% 10) %% 100
df[df$decade %in% c(30, 40, 50, 60), ]$decade <- "<70"
df[df$decade == 0, ]$decade <- "00"
df$decade <- as.character(df$decade)
df$decade <- factor(df$decade, levels = c("<70", "70", "80", "90", "00", "10", "20"))

df <- df %>% 
  select(-release_year)
```

```{r echo=FALSE}
table(df$decade) %>% 
  kable("html", table.attr = "style='width:30%;'", col.names = c("Value", "Frequency")) %>% 
  kable_styling("striped")
```

#### Zmiana wartości w kolumnie `track.explicit` na 0 i 1

```{r}
df$track.explicit <- ifelse(df$track.explicit == TRUE, 1, 0)
```

```{r echo=FALSE}
table(df$track.explicit) %>% 
  kable("html", table.attr = "style='width:30%;'", col.names = c("Value", "Frequency")) %>% 
  kable_styling("striped")
```

#### Kodowanie zmiennych kategorialnych

```{r}
df$genre <- factor(df$genre)
df$key <- factor(df$key)
df$mode <- factor(df$mode)
df$time_signature <- factor(df$time_signature)
df$track.explicit <- factor(df$track.explicit)
```

### Efekt końcowy

```{r echo=FALSE}
devtools::source_gist('4a0a5ab9fe7e1cf3be0e')
strtable(df) %>% 
  select(-levels) %>%  
  kable("html") %>% 
  kable_styling("striped") %>% 
  scroll_box(height = "500px")
```

```{r echo=FALSE}
funs <- lst(min, median, mean, max, sd)

t(map_dfr(funs,
        ~ summarize(df %>% select(-c(key, mode, time_signature)), 
                    across(where(is.numeric), .x, na.rm = TRUE)),
        .id = "statistic")) %>% 
  kable("html") %>% 
  kable_styling("striped")
```

# Wizualizacja

### Rozkłady zmiennych

::: panel-tabset
#### Zmienne kategorialne

::: panel-tabset
##### Gatunek

```{r echo=FALSE}
ggplot(df, aes(x = genre)) + geom_bar(fill = "#F8766D")
```

##### Skale

```{r echo=FALSE}
ggplot(df, aes(x = key, fill = mode)) + geom_bar()
```

##### Metrum

```{r echo=FALSE}
ggplot(df, aes(x = time_signature)) + geom_bar(fill = "#F8766D")
```

##### Wulgarność

```{r echo=FALSE}
ggplot(df, aes(x = track.explicit)) + geom_bar(fill = "#F8766D")
```

##### Dekada

```{r echo=FALSE}
ggplot(df, aes(x = decade)) + geom_bar(fill = "#F8766D")
```
:::

#### Zmienne ciągłe

::: panel-tabset
##### Taneczność

```{r echo=FALSE}
ggplot(df, aes(x = danceability)) + geom_histogram(bins = 30, fill = "#F8766D")
```

##### Energiczność

```{r echo=FALSE}
ggplot(df, aes(x = energy)) + geom_histogram(bins = 30, fill = "#F8766D")
```

##### Głośność

```{r echo=FALSE}
ggplot(df, aes(x = loudness)) + geom_histogram(bins = 30, fill = "#F8766D")
```

##### Recytowalność

```{r echo=FALSE}
ggplot(df, aes(x = speechiness)) + geom_histogram(bins = 30, fill = "#F8766D")
```

##### Akustyczność

```{r echo=FALSE}
ggplot(df, aes(x = acousticness)) + geom_histogram(bins = 30, fill = "#F8766D")
```

##### Instrumentalność

```{r echo=FALSE}
ggplot(df, aes(x = instrumentalness)) + geom_histogram(bins = 30, fill = "#F8766D")
```

##### Wersja na żywo

```{r echo=FALSE}
ggplot(df, aes(x = liveness)) + geom_histogram(bins = 30, fill = "#F8766D")
```

##### Pozytywność nastroju

```{r echo=FALSE}
ggplot(df, aes(x = valence)) + geom_histogram(bins = 30, fill = "#F8766D")
```

##### Tempo

```{r echo=FALSE}
ggplot(df, aes(x = tempo)) + geom_histogram(bins = 30, fill = "#F8766D")
```

##### Długość

```{r echo=FALSE}
ggplot(df, aes(x = track.duration_s)) + geom_histogram(bins = 30, fill = "#F8766D")
```
:::
:::

### Dekada w zależności od gatunku

```{r echo=FALSE}
genres <- unique(df$genre)
```

::: panel-tabset
##### Blues

```{r echo=FALSE}
ggplot(df[df$genre == genres[1], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[1], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```

##### Muzyka klasyczna

```{r echo=FALSE}
ggplot(df[df$genre == genres[2], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[2], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```

##### Country

```{r echo=FALSE}
ggplot(df[df$genre == genres[3], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[3], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```

##### Folk

```{r echo=FALSE}
ggplot(df[df$genre == genres[4], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[4], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```

##### Jazz

```{r echo=FALSE}
ggplot(df[df$genre == genres[5], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[5], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```

##### Hiphop

```{r echo=FALSE}
ggplot(df[df$genre == genres[6], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[6], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```

##### Reggae

```{r echo=FALSE}
ggplot(df[df$genre == genres[7], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[7], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```

##### Rock

```{r echo=FALSE}
ggplot(df[df$genre == genres[8], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[8], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```

##### Metal

```{r echo=FALSE}
ggplot(df[df$genre == genres[9], ], aes(x = decade)) + geom_bar(fill = "#F8766D") + labs(title = str_to_sentence(paste0(genres[9], " w dekadach"))) + theme(plot.title = element_text(hjust = 0.5, size = 25))
```
:::

### Treści wulgarne w zależności od gatunku

```{r echo=FALSE}
df %>% 
  filter(track.explicit == 1) %>% 
  group_by(genre) %>% 
  summarise(n = n()) %>%
  mutate(all = c(187, 226, 238, 248, 235, 247)) %>% 
  ggplot(aes(x = reorder(genre, -n), y = n)) + geom_bar(stat = "identity", fill = "#F8766D") + xlab("genre") + ylab("count") + 
geom_text(aes(label = paste0(round(n/all*100, 2), "%")), position = position_dodge(width = 0.9), vjust = -0.25)
```

### Energy vs. loudness

```{r echo=FALSE}
ggplot(df, aes(x = energy, y = loudness, colour = genre)) + geom_point()
```

### Danceability vs. valence

```{r echo=FALSE}
ggplot(df, aes(x = danceability, y = valence, colour = genre)) + geom_point()
```

### Głośność

```{r echo=FALSE}
df %>% 
  group_by(decade, genre) %>% 
  summarise(loudness = round(mean(loudness), 2)) %>% 
  ungroup() %>% 
  plot_ly(x = ~decade, y = ~loudness, color = ~genre, hovertext = ~loudness) %>% 
  add_lines(hovertemplate = paste0("Average loudness: %{hovertext}"))
```

### Boxploty długości piosenek

```{r echo=FALSE}
ggplot(df, aes(y = track.duration_s/60, x = genre, fill = genre)) + geom_boxplot() + theme(legend.position = "") + ylab("Track length (minutes)")
```

```{r echo=FALSE}
df %>%
group_by(genre) %>%
summarise(sample_size=length(track.duration_s), p_value=shapiro.test(track.duration_s)$p.value)  %>% 
  kable("html") %>% 
  kable_styling("striped")
```

```{r}
bartlett.test(df$track.duration_s, df$genre)
```

```{r}
kruskal.test(track.duration_s ~ genre, df)
```

```{r}
dunntest <- dunn_test(df, track.duration_s ~ genre, p.adjust.method = "bonferroni")
```

```{r echo=FALSE}
dunntest <- dunntest %>% add_xy_position(x = "genre")
ggboxplot(df, x = "genre", y = "track.duration_s", fill = "genre", legend = "") + stat_pvalue_manual(dunntest, hide.ns = TRUE, label = "{round(p.adj, 2)}") 
```

### Zależność zmiennej `valence` od skali

```{r echo=FALSE}
ggplot(df, aes(x = mode, y = valence)) + geom_boxplot()
```

```{r}
t.test(valence ~ mode, data = df)
```

### Wykres korelacji

```{r echo=FALSE}
df %>% 
  select(where(is.numeric)) %>%
  cor() %>% 
  corPlot(cex = 0.5, xlas = 2)
```

::: panel-tabset
#### energy vs. loudness

```{r echo=FALSE}
ggplot(df, aes(x = energy, y = loudness)) + geom_point() + geom_smooth(method = "lm", formula = y ~ poly(x, 2, raw = TRUE))
```

#### energy vs. acousticness

```{r echo=FALSE}
ggplot(df, aes(x = acousticness, y = energy)) + geom_point() + geom_smooth(method = "lm")
```

#### loudness vs. acousticness

```{r echo=FALSE}
ggplot(df, aes(x = acousticness, y = loudness)) + geom_point() + geom_smooth(method = "lm", formula = y ~ poly(x, 2, raw = TRUE))
```
:::

```{r echo=FALSE}
fig <- plot_ly(df, x = ~energy, y = ~loudness, z = ~acousticness, color = ~genre)
fig <- fig %>% add_markers(size = 0.8)
fig <- fig %>% layout(scene = list(xaxis = list(title = 'energy'),
                     yaxis = list(title = 'loudness'),
                     zaxis = list(title = 'acousticness')))
fig
```

#### Porzucenie zmiennych `loudness` i `acousticness`

```{r}
df <- df %>% 
  select(-c(loudness, acousticness))
```

# Modelowanko

## Przygotowanie danych do dalszego procesu modelowania

### Podział zbioru na treningowy i testowy

```{r}
set.seed(170)

split <- initial_split(df, prop = 0.8, strata = genre)
spotify_train <- training(split)
spotify_test <- testing(split)
split
```

### Przygotowanie 10-krotnej walidacji krzyżowej z 5-krotnym powtórzeniem

```{r}
spotify_folds <- vfold_cv(spotify_train, strata = genre)
spotify_folds
```

### Przygotowanie odpowiednich receptur

Modele i rekomendowany preprocessing:

| Rodzaj modelu | Dummy vars | Zero-variance | Decorrelate | Normalize | Transform |
|---------------|------------|---------------|-------------|-----------|-----------|
| Random forest | ✗          | ◌             | ◌           | ✗         | ✗         |
| Bagging       | ✗          | ✗             | ◌           | ✗         | ✗         |
| XGBoost       | ✗          | ◌             | ◌           | ✗         | ✗         |
| Mlp           | ✓          | ✓             | ✓           | ✓         | ✓         |
| Knn           | ✓          | ✓             | ◌           | ✓         | ✓         |
| Svm           | ✓          | ✓             | ✓           | ✓         | ✓         |
| Naive Bayes   | ✗          | ✓             | ◌           | ✗         | ✗         |

```{r}
basic_recipe <-
  recipe(genre~., data = spotify_train) %>% 
  update_role(track.name, new_role = "track_name") %>% 
  step_zv(all_predictors())
```

```{r echo=FALSE}
basic_recipe %>% summary()
```

```{r}
dummy_recipe <- 
  basic_recipe %>% 
  step_dummy(all_nominal_predictors())
```

```{r}
transform_recipe <-
  dummy_recipe %>% 
  step_YeoJohnson(all_numeric_predictors()) %>% 
  step_normalize(all_numeric_predictors())
```

```{r echo=FALSE}
summary(transform_recipe %>% prep(spotify_train)) %>% 
  kable("html") %>% 
  kable_styling("striped") %>% 
  scroll_box(height = "500px")
```

```{r}
rf_spec <- rand_forest(mtry = tune(), min_n = tune(), trees = tune()) %>% 
  set_engine("ranger", importance = "impurity") %>% 
  set_mode("classification")

bagging_spec <- bag_tree(min_n = tune(), tree_depth = tune()) %>% 
  set_engine("rpart", times = 60L) %>% 
  set_mode("classification")

xgb_spec <- boost_tree(mtry = tune(), trees = tune(), min_n = tune(), tree_depth = tune(), learn_rate = tune(), loss_reduction = tune(), sample_size = tune()) %>% 
  set_engine("xgboost") %>% 
  set_mode("classification")
  
mlp_spec <- 
  mlp(hidden_units = tune(), penalty = tune(), epochs = tune()) %>% 
  set_engine("nnet", trace = 0) %>% 
  set_mode("classification")

nearest_spec <- nearest_neighbor(neighbors = tune(), weight_func = tune(), dist_power = tune()) %>% 
  set_engine("kknn") %>% 
  set_mode("classification")

svm_spec <- svm_rbf(cost = tune(), rbf_sigma = tune()) %>%
  set_engine("kernlab") %>% 
  set_mode("classification")

bayes_spec <- naive_Bayes(smoothness = tune(), Laplace = tune()) %>% 
  set_engine("klaR") %>% 
  set_mode("classification")
```

### Stworzenie zestawów przepływu pracy

```{r}
basic <- workflow_set(preproc = list(basic = basic_recipe), 
                      models = list(random_forest = rf_spec, 
                                    bagging = bagging_spec, 
                                    naive_bayes = bayes_spec))
```

```{r}
dummy <- workflow_set(preproc = list(dummy = dummy_recipe), 
                      models = list(xgb = xgb_spec))
```

```{r}
transform <- workflow_set(preproc = list(transform = transform_recipe), 
                          models = list(mlp = mlp_spec, 
                                        knn = nearest_spec, 
                                        svm = svm_spec))
```

```{r}
all_workflows <- bind_rows(basic, dummy, transform) %>% 
  mutate(wflow_id = gsub("(basic_)|(dummy_)|(transform_)", "", wflow_id))
```

```{r echo=FALSE}
all_workflows
```

### Tuning modeli

```{r}
grid_ctrl <- 
  control_grid(
    save_pred = TRUE,
    parallel_over = "everything",
    save_workflow = TRUE)
```

```{r eval=FALSE}
cl <- makePSOCKcluster(4)
registerDoParallel(cl)

grid_results <- 
 all_workflows %>% 
 workflow_map(seed = 170, 
              resamples = spotify_folds, 
              grid = 25, 
              metrics = metric_set(accuracy, bal_accuracy, precision, recall, sensitivity, specificity), 
              control = grid_ctrl)

stopCluster(cl)
registerDoSEQ()

# saveRDS(grid_results, "grid_results_tune2.rds")
```

```{r echo=FALSE}
grid_results <- readRDS("grid_results_tune1.rds")

grid_results %>% 
   rank_results() %>% 
   filter(.metric == "bal_accuracy") %>% 
   select(model, .config, bal_accuracy = mean, rank)

grid_results %>% 
   rank_results() %>% 
   filter(.metric == "bal_accuracy") %>% 
   select(model, .config, bal_accuracy = mean, rank) %>% 
  group_by(model) %>% 
  arrange(-bal_accuracy) %>% 
  slice(1) %>% 
  ungroup() %>% 
  arrange(-bal_accuracy)
```

```{r echo=FALSE}
autoplot(
   grid_results,
   rank_metric = "bal_accuracy",
   metric = "bal_accuracy",
   select_best = TRUE) + 
geom_text(aes(y = mean - 0.03, label = wflow_id), angle = 90, hjust = 1) +
lims(y = c(0.6, 0.9)) +
theme(legend.position = "none")
```

```{r}
best_results <- 
  grid_results %>% 
  extract_workflow_set_result("random_forest") %>% 
  select_best(metric = "bal_accuracy")
```

```{r echo=FALSE}
best_results
```

```{r}
best_model_random_forest <- rand_forest(trees = best_results$trees,
                             mtry = best_results$mtry,
                             min_n = best_results$min_n) %>%
  set_engine("ranger") %>% 
  set_mode("classification")
```

```{r}
rf_wflow <- 
  workflow() %>% 
  add_model(best_model_random_forest) %>% 
  add_recipe(basic_recipe)

rf_fit <- 
  rf_wflow %>% 
  fit(data = spotify_train)
```

```{r}
test_pred <- predict(rf_fit, new_data = spotify_test) %>%
  bind_cols(spotify_test) 

metrics_set <- metric_set(accuracy, bal_accuracy, precision, recall, sensitivity, specificity)

metrics_test <- metrics_set(test_pred,
                    truth = genre, estimate = .pred_class)
```

```{r echo=FALSE}
metrics_test
```

```{r echo=FALSE}
cfm <- table(test_pred$genre, test_pred$.pred_class)
cfm_df <- as.data.frame(cfm)
names(cfm_df) <- c("Truth", "Prediction", "Freq")

# Visualization
ggplot(cfm_df, aes(x = Prediction, y = Truth, fill = Freq)) +
  geom_tile(color = "white") +
  geom_text(aes(label = Freq), vjust = 0.5, color = "white", size = 5) + 
  scale_fill_gradient(low = "lightblue", high = "blue") +  
  labs(title = "Confusion Matrix", x = "Predicted Label",
       y = "Actual Label") +
  theme_minimal() +
  theme(axis.text = element_text(size = 12),
        axis.title = element_text(size = 14),
        plot.title = element_text(hjust = 0.5))
```

```{r echo=FALSE}
wrong_pred <- test_pred %>% 
  select(track.name, genre, .pred_class) %>% 
  filter(genre != .pred_class)
```

```{r echo=FALSE}
wrong_pred %>% 
  filter(genre == "jazz" & .pred_class == "metal") %>%
  kable("html") %>% 
  kable_styling("striped")
```

{{< video https://www.youtube.com/watch?v=dYxgci2uPno >}}

```{r}
random_forest <- rand_forest(mtry = best_results$mtry, min_n = best_results$min_n, trees = best_results$trees) %>% 
  set_engine("ranger", importance = "impurity") %>% 
  set_mode("classification")

last_rf_workflow <- 
  workflow() %>% 
  add_model(random_forest) %>% 
  add_recipe(basic_recipe) %>% 
  last_fit(split) %>% 
  extract_fit_parsnip() %>% 
  vip(num_features = 13)

last_rf_workflow
```

```{r}
rf_wflow %>% 
  last_fit(split) %>% 
  collect_predictions() %>% 
  roc_curve(truth = genre, .pred_blues, .pred_classical, .pred_country, .pred_folk, .pred_hiphop, .pred_jazz, .pred_metal, .pred_reggae, .pred_rock) %>% 
  autoplot()
```
